// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chal_2eproto;
namespace chal {
class AddFile;
class AddFileDefaultTypeInternal;
extern AddFileDefaultTypeInternal _AddFile_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Run;
class RunDefaultTypeInternal;
extern RunDefaultTypeInternal _Run_default_instance_;
class StartSandbox;
class StartSandboxDefaultTypeInternal;
extern StartSandboxDefaultTypeInternal _StartSandbox_default_instance_;
}  // namespace chal
PROTOBUF_NAMESPACE_OPEN
template<> ::chal::AddFile* Arena::CreateMaybeMessage<::chal::AddFile>(Arena*);
template<> ::chal::Command* Arena::CreateMaybeMessage<::chal::Command>(Arena*);
template<> ::chal::Run* Arena::CreateMaybeMessage<::chal::Run>(Arena*);
template<> ::chal::StartSandbox* Arena::CreateMaybeMessage<::chal::StartSandbox>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chal {

// ===================================================================

class StartSandbox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chal.StartSandbox) */ {
 public:
  inline StartSandbox() : StartSandbox(nullptr) {};
  virtual ~StartSandbox();

  StartSandbox(const StartSandbox& from);
  StartSandbox(StartSandbox&& from) noexcept
    : StartSandbox() {
    *this = ::std::move(from);
  }

  inline StartSandbox& operator=(const StartSandbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSandbox& operator=(StartSandbox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSandbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSandbox* internal_default_instance() {
    return reinterpret_cast<const StartSandbox*>(
               &_StartSandbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartSandbox& a, StartSandbox& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSandbox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSandbox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSandbox* New() const final {
    return CreateMaybeMessage<StartSandbox>(nullptr);
  }

  StartSandbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSandbox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSandbox& from);
  void MergeFrom(const StartSandbox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSandbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chal.StartSandbox";
  }
  protected:
  explicit StartSandbox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chal_2eproto);
    return ::descriptor_table_chal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chal.StartSandbox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chal_2eproto;
};
// -------------------------------------------------------------------

class AddFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chal.AddFile) */ {
 public:
  inline AddFile() : AddFile(nullptr) {};
  virtual ~AddFile();

  AddFile(const AddFile& from);
  AddFile(AddFile&& from) noexcept
    : AddFile() {
    *this = ::std::move(from);
  }

  inline AddFile& operator=(const AddFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFile& operator=(AddFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFile* internal_default_instance() {
    return reinterpret_cast<const AddFile*>(
               &_AddFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddFile& a, AddFile& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFile* New() const final {
    return CreateMaybeMessage<AddFile>(nullptr);
  }

  AddFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFile& from);
  void MergeFrom(const AddFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chal.AddFile";
  }
  protected:
  explicit AddFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chal_2eproto);
    return ::descriptor_table_chal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes content = 2;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:chal.AddFile)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  friend struct ::TableStruct_chal_2eproto;
};
// -------------------------------------------------------------------

class Run PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chal.Run) */ {
 public:
  inline Run() : Run(nullptr) {};
  virtual ~Run();

  Run(const Run& from);
  Run(Run&& from) noexcept
    : Run() {
    *this = ::std::move(from);
  }

  inline Run& operator=(const Run& from) {
    CopyFrom(from);
    return *this;
  }
  inline Run& operator=(Run&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Run& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Run* internal_default_instance() {
    return reinterpret_cast<const Run*>(
               &_Run_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Run& a, Run& b) {
    a.Swap(&b);
  }
  inline void Swap(Run* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Run* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Run* New() const final {
    return CreateMaybeMessage<Run>(nullptr);
  }

  Run* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Run>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Run& from);
  void MergeFrom(const Run& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Run* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chal.Run";
  }
  protected:
  explicit Run(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chal_2eproto);
    return ::descriptor_table_chal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // repeated string arg = 1;
  int arg_size() const;
  private:
  int _internal_arg_size() const;
  public:
  void clear_arg();
  const std::string& arg(int index) const;
  std::string* mutable_arg(int index);
  void set_arg(int index, const std::string& value);
  void set_arg(int index, std::string&& value);
  void set_arg(int index, const char* value);
  void set_arg(int index, const char* value, size_t size);
  std::string* add_arg();
  void add_arg(const std::string& value);
  void add_arg(std::string&& value);
  void add_arg(const char* value);
  void add_arg(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arg();
  private:
  const std::string& _internal_arg(int index) const;
  std::string* _internal_add_arg();
  public:

  // @@protoc_insertion_point(class_scope:chal.Run)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chal_2eproto;
};
// -------------------------------------------------------------------

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chal.Command) */ {
 public:
  inline Command() : Command(nullptr) {};
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  enum CommandCase {
    kStartSandbox = 1,
    kAddFile = 2,
    kRun = 3,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chal.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chal_2eproto);
    return ::descriptor_table_chal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartSandboxFieldNumber = 1,
    kAddFileFieldNumber = 2,
    kRunFieldNumber = 3,
  };
  // .chal.StartSandbox start_sandbox = 1;
  bool has_start_sandbox() const;
  private:
  bool _internal_has_start_sandbox() const;
  public:
  void clear_start_sandbox();
  const ::chal::StartSandbox& start_sandbox() const;
  ::chal::StartSandbox* release_start_sandbox();
  ::chal::StartSandbox* mutable_start_sandbox();
  void set_allocated_start_sandbox(::chal::StartSandbox* start_sandbox);
  private:
  const ::chal::StartSandbox& _internal_start_sandbox() const;
  ::chal::StartSandbox* _internal_mutable_start_sandbox();
  public:
  void unsafe_arena_set_allocated_start_sandbox(
      ::chal::StartSandbox* start_sandbox);
  ::chal::StartSandbox* unsafe_arena_release_start_sandbox();

  // .chal.AddFile add_file = 2;
  bool has_add_file() const;
  private:
  bool _internal_has_add_file() const;
  public:
  void clear_add_file();
  const ::chal::AddFile& add_file() const;
  ::chal::AddFile* release_add_file();
  ::chal::AddFile* mutable_add_file();
  void set_allocated_add_file(::chal::AddFile* add_file);
  private:
  const ::chal::AddFile& _internal_add_file() const;
  ::chal::AddFile* _internal_mutable_add_file();
  public:
  void unsafe_arena_set_allocated_add_file(
      ::chal::AddFile* add_file);
  ::chal::AddFile* unsafe_arena_release_add_file();

  // .chal.Run run = 3;
  bool has_run() const;
  private:
  bool _internal_has_run() const;
  public:
  void clear_run();
  const ::chal::Run& run() const;
  ::chal::Run* release_run();
  ::chal::Run* mutable_run();
  void set_allocated_run(::chal::Run* run);
  private:
  const ::chal::Run& _internal_run() const;
  ::chal::Run* _internal_mutable_run();
  public:
  void unsafe_arena_set_allocated_run(
      ::chal::Run* run);
  ::chal::Run* unsafe_arena_release_run();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:chal.Command)
 private:
  class _Internal;
  void set_has_start_sandbox();
  void set_has_add_file();
  void set_has_run();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandUnion {
    CommandUnion() {}
    ::chal::StartSandbox* start_sandbox_;
    ::chal::AddFile* add_file_;
    ::chal::Run* run_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartSandbox

// -------------------------------------------------------------------

// AddFile

// required string name = 1;
inline bool AddFile::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddFile::has_name() const {
  return _internal_has_name();
}
inline void AddFile::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddFile::name() const {
  // @@protoc_insertion_point(field_get:chal.AddFile.name)
  return _internal_name();
}
inline void AddFile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:chal.AddFile.name)
}
inline std::string* AddFile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:chal.AddFile.name)
  return _internal_mutable_name();
}
inline const std::string& AddFile::_internal_name() const {
  return name_.Get();
}
inline void AddFile::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddFile::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chal.AddFile.name)
}
inline void AddFile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chal.AddFile.name)
}
inline void AddFile::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chal.AddFile.name)
}
inline std::string* AddFile::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddFile::release_name() {
  // @@protoc_insertion_point(field_release:chal.AddFile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chal.AddFile.name)
}
inline std::string* AddFile::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chal.AddFile.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddFile::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chal.AddFile.name)
}

// required bytes content = 2;
inline bool AddFile::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddFile::has_content() const {
  return _internal_has_content();
}
inline void AddFile::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddFile::content() const {
  // @@protoc_insertion_point(field_get:chal.AddFile.content)
  return _internal_content();
}
inline void AddFile::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:chal.AddFile.content)
}
inline std::string* AddFile::mutable_content() {
  // @@protoc_insertion_point(field_mutable:chal.AddFile.content)
  return _internal_mutable_content();
}
inline const std::string& AddFile::_internal_content() const {
  return content_.Get();
}
inline void AddFile::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddFile::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chal.AddFile.content)
}
inline void AddFile::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chal.AddFile.content)
}
inline void AddFile::set_content(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chal.AddFile.content)
}
inline std::string* AddFile::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000002u;
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddFile::release_content() {
  // @@protoc_insertion_point(field_release:chal.AddFile.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddFile::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chal.AddFile.content)
}
inline std::string* AddFile::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chal.AddFile.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddFile::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chal.AddFile.content)
}

// -------------------------------------------------------------------

// Run

// repeated string arg = 1;
inline int Run::_internal_arg_size() const {
  return arg_.size();
}
inline int Run::arg_size() const {
  return _internal_arg_size();
}
inline void Run::clear_arg() {
  arg_.Clear();
}
inline std::string* Run::add_arg() {
  // @@protoc_insertion_point(field_add_mutable:chal.Run.arg)
  return _internal_add_arg();
}
inline const std::string& Run::_internal_arg(int index) const {
  return arg_.Get(index);
}
inline const std::string& Run::arg(int index) const {
  // @@protoc_insertion_point(field_get:chal.Run.arg)
  return _internal_arg(index);
}
inline std::string* Run::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:chal.Run.arg)
  return arg_.Mutable(index);
}
inline void Run::set_arg(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chal.Run.arg)
  arg_.Mutable(index)->assign(value);
}
inline void Run::set_arg(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chal.Run.arg)
  arg_.Mutable(index)->assign(std::move(value));
}
inline void Run::set_arg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chal.Run.arg)
}
inline void Run::set_arg(int index, const char* value, size_t size) {
  arg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chal.Run.arg)
}
inline std::string* Run::_internal_add_arg() {
  return arg_.Add();
}
inline void Run::add_arg(const std::string& value) {
  arg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chal.Run.arg)
}
inline void Run::add_arg(std::string&& value) {
  arg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chal.Run.arg)
}
inline void Run::add_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chal.Run.arg)
}
inline void Run::add_arg(const char* value, size_t size) {
  arg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chal.Run.arg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Run::arg() const {
  // @@protoc_insertion_point(field_list:chal.Run.arg)
  return arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Run::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:chal.Run.arg)
  return &arg_;
}

// -------------------------------------------------------------------

// Command

// .chal.StartSandbox start_sandbox = 1;
inline bool Command::_internal_has_start_sandbox() const {
  return command_case() == kStartSandbox;
}
inline bool Command::has_start_sandbox() const {
  return _internal_has_start_sandbox();
}
inline void Command::set_has_start_sandbox() {
  _oneof_case_[0] = kStartSandbox;
}
inline void Command::clear_start_sandbox() {
  if (_internal_has_start_sandbox()) {
    if (GetArena() == nullptr) {
      delete command_.start_sandbox_;
    }
    clear_has_command();
  }
}
inline ::chal::StartSandbox* Command::release_start_sandbox() {
  // @@protoc_insertion_point(field_release:chal.Command.start_sandbox)
  if (_internal_has_start_sandbox()) {
    clear_has_command();
      ::chal::StartSandbox* temp = command_.start_sandbox_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.start_sandbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chal::StartSandbox& Command::_internal_start_sandbox() const {
  return _internal_has_start_sandbox()
      ? *command_.start_sandbox_
      : *reinterpret_cast< ::chal::StartSandbox*>(&::chal::_StartSandbox_default_instance_);
}
inline const ::chal::StartSandbox& Command::start_sandbox() const {
  // @@protoc_insertion_point(field_get:chal.Command.start_sandbox)
  return _internal_start_sandbox();
}
inline ::chal::StartSandbox* Command::unsafe_arena_release_start_sandbox() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chal.Command.start_sandbox)
  if (_internal_has_start_sandbox()) {
    clear_has_command();
    ::chal::StartSandbox* temp = command_.start_sandbox_;
    command_.start_sandbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_start_sandbox(::chal::StartSandbox* start_sandbox) {
  clear_command();
  if (start_sandbox) {
    set_has_start_sandbox();
    command_.start_sandbox_ = start_sandbox;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chal.Command.start_sandbox)
}
inline ::chal::StartSandbox* Command::_internal_mutable_start_sandbox() {
  if (!_internal_has_start_sandbox()) {
    clear_command();
    set_has_start_sandbox();
    command_.start_sandbox_ = CreateMaybeMessage< ::chal::StartSandbox >(GetArena());
  }
  return command_.start_sandbox_;
}
inline ::chal::StartSandbox* Command::mutable_start_sandbox() {
  // @@protoc_insertion_point(field_mutable:chal.Command.start_sandbox)
  return _internal_mutable_start_sandbox();
}

// .chal.AddFile add_file = 2;
inline bool Command::_internal_has_add_file() const {
  return command_case() == kAddFile;
}
inline bool Command::has_add_file() const {
  return _internal_has_add_file();
}
inline void Command::set_has_add_file() {
  _oneof_case_[0] = kAddFile;
}
inline void Command::clear_add_file() {
  if (_internal_has_add_file()) {
    if (GetArena() == nullptr) {
      delete command_.add_file_;
    }
    clear_has_command();
  }
}
inline ::chal::AddFile* Command::release_add_file() {
  // @@protoc_insertion_point(field_release:chal.Command.add_file)
  if (_internal_has_add_file()) {
    clear_has_command();
      ::chal::AddFile* temp = command_.add_file_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.add_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chal::AddFile& Command::_internal_add_file() const {
  return _internal_has_add_file()
      ? *command_.add_file_
      : *reinterpret_cast< ::chal::AddFile*>(&::chal::_AddFile_default_instance_);
}
inline const ::chal::AddFile& Command::add_file() const {
  // @@protoc_insertion_point(field_get:chal.Command.add_file)
  return _internal_add_file();
}
inline ::chal::AddFile* Command::unsafe_arena_release_add_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chal.Command.add_file)
  if (_internal_has_add_file()) {
    clear_has_command();
    ::chal::AddFile* temp = command_.add_file_;
    command_.add_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_add_file(::chal::AddFile* add_file) {
  clear_command();
  if (add_file) {
    set_has_add_file();
    command_.add_file_ = add_file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chal.Command.add_file)
}
inline ::chal::AddFile* Command::_internal_mutable_add_file() {
  if (!_internal_has_add_file()) {
    clear_command();
    set_has_add_file();
    command_.add_file_ = CreateMaybeMessage< ::chal::AddFile >(GetArena());
  }
  return command_.add_file_;
}
inline ::chal::AddFile* Command::mutable_add_file() {
  // @@protoc_insertion_point(field_mutable:chal.Command.add_file)
  return _internal_mutable_add_file();
}

// .chal.Run run = 3;
inline bool Command::_internal_has_run() const {
  return command_case() == kRun;
}
inline bool Command::has_run() const {
  return _internal_has_run();
}
inline void Command::set_has_run() {
  _oneof_case_[0] = kRun;
}
inline void Command::clear_run() {
  if (_internal_has_run()) {
    if (GetArena() == nullptr) {
      delete command_.run_;
    }
    clear_has_command();
  }
}
inline ::chal::Run* Command::release_run() {
  // @@protoc_insertion_point(field_release:chal.Command.run)
  if (_internal_has_run()) {
    clear_has_command();
      ::chal::Run* temp = command_.run_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chal::Run& Command::_internal_run() const {
  return _internal_has_run()
      ? *command_.run_
      : *reinterpret_cast< ::chal::Run*>(&::chal::_Run_default_instance_);
}
inline const ::chal::Run& Command::run() const {
  // @@protoc_insertion_point(field_get:chal.Command.run)
  return _internal_run();
}
inline ::chal::Run* Command::unsafe_arena_release_run() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chal.Command.run)
  if (_internal_has_run()) {
    clear_has_command();
    ::chal::Run* temp = command_.run_;
    command_.run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_run(::chal::Run* run) {
  clear_command();
  if (run) {
    set_has_run();
    command_.run_ = run;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chal.Command.run)
}
inline ::chal::Run* Command::_internal_mutable_run() {
  if (!_internal_has_run()) {
    clear_command();
    set_has_run();
    command_.run_ = CreateMaybeMessage< ::chal::Run >(GetArena());
  }
  return command_.run_;
}
inline ::chal::Run* Command::mutable_run() {
  // @@protoc_insertion_point(field_mutable:chal.Command.run)
  return _internal_mutable_run();
}

inline bool Command::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void Command::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline Command::CommandCase Command::command_case() const {
  return Command::CommandCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chal_2eproto
